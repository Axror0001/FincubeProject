@page "/ReadStudentFile"
@using ProjectBlazor.Models
@using ProjectBlazor.StudentData
@using OfficeOpenXml
@inject IStudent Service
@inject HttpClient _httpClient
<h3>ReadStudentFile</h3>
<form>
    <InputFile OnChange="OnInputFileChange" multiple />
    <button type="button" class="btn btn-primary" @onclick="OnSubmit">SaveBaza</button>
</form>
<table class="table">
    <thead>
        <tr>
            @foreach (var column in Columns)
            {
                <th>@column</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var rows in Rows)
        {
            <tr>
                @foreach (var cell in rows)
                {
                    <td>@cell</td>
                }
            </tr>
        }
    </tbody>
</table>


@code {
    private List<string> Columns { get; set; } = new List<string>();
    private List<List<string>> Rows { get; set; } = new List<List<string>>();
    private IBrowserFile files;
    private async void OnInputFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        files = e.File;

        using (var stream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(stream);
            stream.Position = 0;
            //ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
            using (var package = new ExcelPackage(stream))
            {
                var worksheet = package.Workbook.Worksheets[0];
                var rowCount = worksheet.Dimension.Rows;
                var colCount = worksheet.Dimension.Columns;

                Rows.Clear();
                Columns.Clear();
                for (int col = 1; col <= colCount; col++)
                {
                    Columns.Add(worksheet.Cells[1, col].Text);
                }
                for (int row = 1; row <= rowCount; row++)
                {
                    var rowData = new List<string>();
                    for (int col = 1; col <= colCount; col++)
                    {
                        rowData.Add(worksheet.Cells[row, col].Text);
                    }
                    Rows.Add(rowData);
                }
            }
        }
        StateHasChanged();
    }
    private async Task OnSubmit()
    {
        using (var content = new MultipartFormDataContent())
        {
            content.Add(new StreamContent(files.OpenReadStream()), "e", files.Name);

            var response = await _httpClient.PostAsync("UploadStudents", content);
            StateHasChanged();
        }
    }
}
